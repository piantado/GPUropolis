
//------------
// For easier displays
const int MAX_OP_LENGTH = 256; // how much does each string add at most?
char SS[MAX_PROGRAM_LENGTH*2][MAX_OP_LENGTH*MAX_PROGRAM_LENGTH]; 
void print_program_as_expression(hypothesis* h) {
	
	char buf[MAX_PROGRAM_LENGTH*MAX_PROGRAM_LENGTH];
	
	int top = MAX_PROGRAM_LENGTH; // top of the stack
	int ctop = 0x0; // the top of the ocnstant stack 
	
	// re-initialize our buffer
	for(int r=0;r<MAX_PROGRAM_LENGTH*2;r++) strcpy(SS[r], "0"); // since everything initializes to 0
	
	for(int p=0;p<MAX_PROGRAM_LENGTH;p++) {
		int op = h->program[p];
		
		switch(op) {
			case POPCONS:
				top += 1;
				sprintf(SS[top], "%3.3f", h->constants[ctop]);
				ctop++;
				break;
			case ZERO: 
				top += 1;
				strcpy(SS[top], "0");
				break;
			case ONE: 
				top += 1;
				strcpy(SS[top], "1");
				break;
			case X:
				top += 1;
				strcpy(SS[top], "x");
				break;
			case PI:
				top += 1;
				strcpy(SS[top], "PI");
				break;
			case E:
				top += 1;
				strcpy(SS[top], "E");
				break;
			case ADD:
				strcpy(buf, "(+ ");
				strcat(buf, SS[top]);
				strcat(buf, " ");
				strcat(buf, SS[top-1]);
				strcat(buf, ")");
				top -= 1;
				strcpy(SS[top], buf);
				break;
				
			case SUB:
				strcpy(buf, "(- ");
				strcat(buf, SS[top]);
				strcat(buf, " ");
				strcat(buf, SS[top-1]);
				strcat(buf, ")");
				top -= 1;
				strcpy(SS[top], buf);
				break;
				
			case MUL:
				strcpy(buf, "(* ");
				strcat(buf, SS[top]);
				strcat(buf, " ");
				strcat(buf, SS[top-1]);
				strcat(buf, ")");
				top -= 1;
				strcpy(SS[top], buf);
				break;
				
			case DIV:
				strcpy(buf, "(/ ");
				strcat(buf, SS[top]);
				strcat(buf, " ");
				strcat(buf, SS[top-1]);
				strcat(buf, ")");
				top -= 1;
				strcpy(SS[top], buf);
				break;
			case POW:
				strcpy(buf, "(pow ");
				strcat(buf, SS[top]);
				strcat(buf, " ");
				strcat(buf, SS[top-1]);
				strcat(buf, ")");
				top -= 1;
				strcpy(SS[top], buf);
				break;	
				
			case LOG:
				strcpy(buf, "(log ");
				strcat(buf, SS[top]);
				strcat(buf, ")");
				strcpy(SS[top], buf);
				break;
				
			case EXP:
				strcpy(buf, "(exp ");
				strcat(buf, SS[top]);
				strcat(buf, ")");
				strcpy(SS[top], buf);
				break;
				
		}
	}
	
	printf("%s", SS[top]);
}